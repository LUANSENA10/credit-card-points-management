services:
  # Serviço do RabbitMQ
  rabbitmq:
    image: rabbitmq:3-management-alpine
    ports:
      - "5672:5672"   # Porta para comunicação AMQP
      - "15672:15672" # Porta para a interface de gerenciamento web
    environment:
      RABBITMQ_DEFAULT_USER: user
      RABBITMQ_DEFAULT_PASS: password
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq/
    networks:
      - app-network
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # Serviço do banco de dados PostgreSQL
  postgres:
    image: postgres:16
    environment:
      POSTGRES_DB: pointdb
      POSTGRES_USER: pointuser
      POSTGRES_PASSWORD: pointpass
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U pointuser -d pointdb" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # Serviço da aplicação pont-service
  point-service:
    build:
      context: ./point-service # Caminho para a pasta do serviço
    container_name: pont_service_app
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
    ports:
      - "8081:8080" # Mapeia a porta 8080 do container para a 8081 da sua máquina
    environment:
      - SPRING_RABBITMQ_HOST=rabbitmq
    networks:
      - app-network

  # Serviço da aplicação user-service
  user-service:
    build:
      context: ./user-service
    container_name: user_service_app
    depends_on:
      postgres-user:
        condition: service_healthy
    ports:
      - "8082:8081" # Mapeia a porta 8081 do container para a 8082 da sua máquina
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-user:5432/userdb
      - SPRING_DATASOURCE_USERNAME=user
      - SPRING_DATASOURCE_PASSWORD=pass
      - SPRING_PROFILES_ACTIVE=default
    networks:
      - app-network

  # Banco de dados do user-service
  postgres-user:
    image: postgres:16
    environment:
      POSTGRES_DB: userdb
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pass
    ports:
      - "5433:5432"
    volumes:
      - postgres_user_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U user -d userdb" ]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  rabbitmq_data:
  postgres_data:
  postgres_user_data:

networks:
  app-network:
    driver: bridge
